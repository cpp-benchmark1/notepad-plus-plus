name: Coverity Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  coverity:
    runs-on: windows-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download Coverity Analysis
        shell: pwsh
        run: |
          $token = "${{ secrets.COVERITY_TOKEN }}"
          if (-not $token) { Write-Error "COVERITY_TOKEN secret is required"; exit 1 }
          Invoke-WebRequest -Uri "https://scan.coverity.com/download/win64" -Method Post -Body "token=$token&project=${{ github.repository }}" -OutFile "coverity_tool.zip"
          Expand-Archive -Path "coverity_tool.zip" -DestinationPath "$PWD" -Force
          $covBuildExe = Get-ChildItem -Path $PWD -Recurse -Filter "cov-build.exe" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $covBuildExe) { Write-Error "cov-build.exe not found after extracting Coverity tool"; exit 1 }
          echo "$([System.IO.Path]::GetDirectoryName($covBuildExe))" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Host "cov-build found at $covBuildExe"
          Set-Content -Path "$env:GITHUB_WORKSPACE\_COV_BUILD_EXE.txt" -Value $covBuildExe

      - name: Install MSYS2 toolchain
        shell: pwsh
        run: |
          choco install msys2 -y
          refreshenv
          C:\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm"
          C:\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-curl mingw-w64-x86_64-libxml2 mingw-w64-x86_64-mongo-c-driver"
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build Notepad++ inside MSYS2 and collect with Coverity
        shell: pwsh
        run: |
          $covIntDir = "$env:GITHUB_WORKSPACE\\cov-int"
          $covBuildExe = Get-Content "$env:GITHUB_WORKSPACE\\_COV_BUILD_EXE.txt"
          $covBuildExeUnix = $covBuildExe -replace '\\', '/'
          $covIntDirUnix = $covIntDir -replace '\\', '/'
          
          $bashCommand = "set -e && " +
                        "export PATH=/mingw64/bin:`$PATH && " +
                        "export PKG_CONFIG_PATH=/mingw64/lib/pkgconfig && " +
                        "export CPATH=/mingw64/include/libbson-1.0:/mingw64/include/libmongoc-1.0:/mingw64/include/libxml2 && " +
                        "`"$covBuildExeUnix`" --dir `"$covIntDirUnix`" /mingw64/bin/make -f PowerEditor/gcc/makefile"

          Write-Host "Running inside bash: $bashCommand"

          C:\msys64\usr\bin\bash.exe -lc "$bashCommand"


      - name: Archive cov-int
        shell: pwsh
        run: |
          $covInt = "$env:GITHUB_WORKSPACE\cov-int"
          if (!(Test-Path $covInt)) { Write-Error "cov-int not found at $covInt"; exit 1 }
          $zipPath = "$env:GITHUB_WORKSPACE\coverity-cov-int.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path $covInt -DestinationPath $zipPath
          Write-Host "Created $zipPath"

      - name: Upload to Coverity Scan
        shell: pwsh
        env:
          COVERITY_EMAIL: ${{ secrets.COVERITY_EMAIL }}
        run: |
          $zipPath = "$env:GITHUB_WORKSPACE\coverity-cov-int.zip"
          if (-not (Test-Path $zipPath)) { Write-Error "Zip not found: $zipPath"; exit 1 }
          $email = $env:COVERITY_EMAIL
          if (-not $email) { Write-Error "COVERITY_EMAIL secret is required"; exit 1 }
          $url = "https://scan.coverity.com/builds?project=${{ github.repository }}"
          $desc = "GitHub Actions $env:GITHUB_WORKFLOW run $env:GITHUB_RUN_NUMBER ($env:GITHUB_SHA)"
          curl -f -sS -X POST `
            -F "token=${{ secrets.COVERITY_TOKEN }}" `
            -F "email=$email" `
            -F "file=@$zipPath" `
            -F "version=${{ github.sha }}" `
            -F "description=$desc" `
            "$url"

      - name: Upload build log (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverity-build-log
          path: cov-int/build-log.txt
